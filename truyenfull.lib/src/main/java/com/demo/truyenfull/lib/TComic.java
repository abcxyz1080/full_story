/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.demo.truyenfull.lib;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-11-27")
public class TComic implements org.apache.thrift.TBase<TComic, TComic._Fields>, java.io.Serializable, Cloneable, Comparable<TComic> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TComic");

  private static final org.apache.thrift.protocol.TField ID_COMIC_FIELD_DESC = new org.apache.thrift.protocol.TField("idComic", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("author", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField THUMBNAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("thumbnail", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("link", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("rate", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("view", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField UPDATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedAt", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField NUMBER_OF_CHAPTER_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfChapter", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CATEGORIES_FIELD_DESC = new org.apache.thrift.protocol.TField("categories", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField CHAPTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("chapters", org.apache.thrift.protocol.TType.LIST, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TComicStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TComicTupleSchemeFactory();

  public long idComic; // required
  public java.lang.String title; // required
  public java.lang.String description; // required
  public java.lang.String author; // required
  public java.lang.String thumbnail; // required
  public java.lang.String status; // required
  public java.lang.String link; // required
  public long rate; // required
  public long view; // required
  public java.lang.String createdAt; // required
  public java.lang.String updatedAt; // required
  public java.lang.String numberOfChapter; // required
  public java.util.List<TCategory> categories; // required
  public java.util.List<TChapter> chapters; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID_COMIC((short)1, "idComic"),
    TITLE((short)2, "title"),
    DESCRIPTION((short)3, "description"),
    AUTHOR((short)4, "author"),
    THUMBNAIL((short)5, "thumbnail"),
    STATUS((short)6, "status"),
    LINK((short)7, "link"),
    RATE((short)8, "rate"),
    VIEW((short)9, "view"),
    CREATED_AT((short)10, "createdAt"),
    UPDATED_AT((short)11, "updatedAt"),
    NUMBER_OF_CHAPTER((short)12, "numberOfChapter"),
    CATEGORIES((short)13, "categories"),
    CHAPTERS((short)14, "chapters");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID_COMIC
          return ID_COMIC;
        case 2: // TITLE
          return TITLE;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // AUTHOR
          return AUTHOR;
        case 5: // THUMBNAIL
          return THUMBNAIL;
        case 6: // STATUS
          return STATUS;
        case 7: // LINK
          return LINK;
        case 8: // RATE
          return RATE;
        case 9: // VIEW
          return VIEW;
        case 10: // CREATED_AT
          return CREATED_AT;
        case 11: // UPDATED_AT
          return UPDATED_AT;
        case 12: // NUMBER_OF_CHAPTER
          return NUMBER_OF_CHAPTER;
        case 13: // CATEGORIES
          return CATEGORIES;
        case 14: // CHAPTERS
          return CHAPTERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IDCOMIC_ISSET_ID = 0;
  private static final int __RATE_ISSET_ID = 1;
  private static final int __VIEW_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID_COMIC, new org.apache.thrift.meta_data.FieldMetaData("idComic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("author", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THUMBNAIL, new org.apache.thrift.meta_data.FieldMetaData("thumbnail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK, new org.apache.thrift.meta_data.FieldMetaData("link", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RATE, new org.apache.thrift.meta_data.FieldMetaData("rate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VIEW, new org.apache.thrift.meta_data.FieldMetaData("view", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATED_AT, new org.apache.thrift.meta_data.FieldMetaData("updatedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUMBER_OF_CHAPTER, new org.apache.thrift.meta_data.FieldMetaData("numberOfChapter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORIES, new org.apache.thrift.meta_data.FieldMetaData("categories", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TCategory"))));
    tmpMap.put(_Fields.CHAPTERS, new org.apache.thrift.meta_data.FieldMetaData("chapters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TChapter"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TComic.class, metaDataMap);
  }

  public TComic() {
  }

  public TComic(
    long idComic,
    java.lang.String title,
    java.lang.String description,
    java.lang.String author,
    java.lang.String thumbnail,
    java.lang.String status,
    java.lang.String link,
    long rate,
    long view,
    java.lang.String createdAt,
    java.lang.String updatedAt,
    java.lang.String numberOfChapter,
    java.util.List<TCategory> categories,
    java.util.List<TChapter> chapters)
  {
    this();
    this.idComic = idComic;
    setIdComicIsSet(true);
    this.title = title;
    this.description = description;
    this.author = author;
    this.thumbnail = thumbnail;
    this.status = status;
    this.link = link;
    this.rate = rate;
    setRateIsSet(true);
    this.view = view;
    setViewIsSet(true);
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.numberOfChapter = numberOfChapter;
    this.categories = categories;
    this.chapters = chapters;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TComic(TComic other) {
    __isset_bitfield = other.__isset_bitfield;
    this.idComic = other.idComic;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetAuthor()) {
      this.author = other.author;
    }
    if (other.isSetThumbnail()) {
      this.thumbnail = other.thumbnail;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetLink()) {
      this.link = other.link;
    }
    this.rate = other.rate;
    this.view = other.view;
    if (other.isSetCreatedAt()) {
      this.createdAt = other.createdAt;
    }
    if (other.isSetUpdatedAt()) {
      this.updatedAt = other.updatedAt;
    }
    if (other.isSetNumberOfChapter()) {
      this.numberOfChapter = other.numberOfChapter;
    }
    if (other.isSetCategories()) {
      java.util.List<TCategory> __this__categories = new java.util.ArrayList<TCategory>(other.categories.size());
      for (TCategory other_element : other.categories) {
        __this__categories.add(new TCategory(other_element));
      }
      this.categories = __this__categories;
    }
    if (other.isSetChapters()) {
      java.util.List<TChapter> __this__chapters = new java.util.ArrayList<TChapter>(other.chapters.size());
      for (TChapter other_element : other.chapters) {
        __this__chapters.add(new TChapter(other_element));
      }
      this.chapters = __this__chapters;
    }
  }

  public TComic deepCopy() {
    return new TComic(this);
  }

  @Override
  public void clear() {
    setIdComicIsSet(false);
    this.idComic = 0;
    this.title = null;
    this.description = null;
    this.author = null;
    this.thumbnail = null;
    this.status = null;
    this.link = null;
    setRateIsSet(false);
    this.rate = 0;
    setViewIsSet(false);
    this.view = 0;
    this.createdAt = null;
    this.updatedAt = null;
    this.numberOfChapter = null;
    this.categories = null;
    this.chapters = null;
  }

  public long getIdComic() {
    return this.idComic;
  }

  public TComic setIdComic(long idComic) {
    this.idComic = idComic;
    setIdComicIsSet(true);
    return this;
  }

  public void unsetIdComic() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDCOMIC_ISSET_ID);
  }

  /** Returns true if field idComic is set (has been assigned a value) and false otherwise */
  public boolean isSetIdComic() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDCOMIC_ISSET_ID);
  }

  public void setIdComicIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDCOMIC_ISSET_ID, value);
  }

  public java.lang.String getTitle() {
    return this.title;
  }

  public TComic setTitle(java.lang.String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public java.lang.String getDescription() {
    return this.description;
  }

  public TComic setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public java.lang.String getAuthor() {
    return this.author;
  }

  public TComic setAuthor(java.lang.String author) {
    this.author = author;
    return this;
  }

  public void unsetAuthor() {
    this.author = null;
  }

  /** Returns true if field author is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthor() {
    return this.author != null;
  }

  public void setAuthorIsSet(boolean value) {
    if (!value) {
      this.author = null;
    }
  }

  public java.lang.String getThumbnail() {
    return this.thumbnail;
  }

  public TComic setThumbnail(java.lang.String thumbnail) {
    this.thumbnail = thumbnail;
    return this;
  }

  public void unsetThumbnail() {
    this.thumbnail = null;
  }

  /** Returns true if field thumbnail is set (has been assigned a value) and false otherwise */
  public boolean isSetThumbnail() {
    return this.thumbnail != null;
  }

  public void setThumbnailIsSet(boolean value) {
    if (!value) {
      this.thumbnail = null;
    }
  }

  public java.lang.String getStatus() {
    return this.status;
  }

  public TComic setStatus(java.lang.String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public java.lang.String getLink() {
    return this.link;
  }

  public TComic setLink(java.lang.String link) {
    this.link = link;
    return this;
  }

  public void unsetLink() {
    this.link = null;
  }

  /** Returns true if field link is set (has been assigned a value) and false otherwise */
  public boolean isSetLink() {
    return this.link != null;
  }

  public void setLinkIsSet(boolean value) {
    if (!value) {
      this.link = null;
    }
  }

  public long getRate() {
    return this.rate;
  }

  public TComic setRate(long rate) {
    this.rate = rate;
    setRateIsSet(true);
    return this;
  }

  public void unsetRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RATE_ISSET_ID);
  }

  /** Returns true if field rate is set (has been assigned a value) and false otherwise */
  public boolean isSetRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RATE_ISSET_ID);
  }

  public void setRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RATE_ISSET_ID, value);
  }

  public long getView() {
    return this.view;
  }

  public TComic setView(long view) {
    this.view = view;
    setViewIsSet(true);
    return this;
  }

  public void unsetView() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VIEW_ISSET_ID);
  }

  /** Returns true if field view is set (has been assigned a value) and false otherwise */
  public boolean isSetView() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VIEW_ISSET_ID);
  }

  public void setViewIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VIEW_ISSET_ID, value);
  }

  public java.lang.String getCreatedAt() {
    return this.createdAt;
  }

  public TComic setCreatedAt(java.lang.String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  public void unsetCreatedAt() {
    this.createdAt = null;
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return this.createdAt != null;
  }

  public void setCreatedAtIsSet(boolean value) {
    if (!value) {
      this.createdAt = null;
    }
  }

  public java.lang.String getUpdatedAt() {
    return this.updatedAt;
  }

  public TComic setUpdatedAt(java.lang.String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  public void unsetUpdatedAt() {
    this.updatedAt = null;
  }

  /** Returns true if field updatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedAt() {
    return this.updatedAt != null;
  }

  public void setUpdatedAtIsSet(boolean value) {
    if (!value) {
      this.updatedAt = null;
    }
  }

  public java.lang.String getNumberOfChapter() {
    return this.numberOfChapter;
  }

  public TComic setNumberOfChapter(java.lang.String numberOfChapter) {
    this.numberOfChapter = numberOfChapter;
    return this;
  }

  public void unsetNumberOfChapter() {
    this.numberOfChapter = null;
  }

  /** Returns true if field numberOfChapter is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberOfChapter() {
    return this.numberOfChapter != null;
  }

  public void setNumberOfChapterIsSet(boolean value) {
    if (!value) {
      this.numberOfChapter = null;
    }
  }

  public int getCategoriesSize() {
    return (this.categories == null) ? 0 : this.categories.size();
  }

  public java.util.Iterator<TCategory> getCategoriesIterator() {
    return (this.categories == null) ? null : this.categories.iterator();
  }

  public void addToCategories(TCategory elem) {
    if (this.categories == null) {
      this.categories = new java.util.ArrayList<TCategory>();
    }
    this.categories.add(elem);
  }

  public java.util.List<TCategory> getCategories() {
    return this.categories;
  }

  public TComic setCategories(java.util.List<TCategory> categories) {
    this.categories = categories;
    return this;
  }

  public void unsetCategories() {
    this.categories = null;
  }

  /** Returns true if field categories is set (has been assigned a value) and false otherwise */
  public boolean isSetCategories() {
    return this.categories != null;
  }

  public void setCategoriesIsSet(boolean value) {
    if (!value) {
      this.categories = null;
    }
  }

  public int getChaptersSize() {
    return (this.chapters == null) ? 0 : this.chapters.size();
  }

  public java.util.Iterator<TChapter> getChaptersIterator() {
    return (this.chapters == null) ? null : this.chapters.iterator();
  }

  public void addToChapters(TChapter elem) {
    if (this.chapters == null) {
      this.chapters = new java.util.ArrayList<TChapter>();
    }
    this.chapters.add(elem);
  }

  public java.util.List<TChapter> getChapters() {
    return this.chapters;
  }

  public TComic setChapters(java.util.List<TChapter> chapters) {
    this.chapters = chapters;
    return this;
  }

  public void unsetChapters() {
    this.chapters = null;
  }

  /** Returns true if field chapters is set (has been assigned a value) and false otherwise */
  public boolean isSetChapters() {
    return this.chapters != null;
  }

  public void setChaptersIsSet(boolean value) {
    if (!value) {
      this.chapters = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID_COMIC:
      if (value == null) {
        unsetIdComic();
      } else {
        setIdComic((java.lang.Long)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case AUTHOR:
      if (value == null) {
        unsetAuthor();
      } else {
        setAuthor((java.lang.String)value);
      }
      break;

    case THUMBNAIL:
      if (value == null) {
        unsetThumbnail();
      } else {
        setThumbnail((java.lang.String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.String)value);
      }
      break;

    case LINK:
      if (value == null) {
        unsetLink();
      } else {
        setLink((java.lang.String)value);
      }
      break;

    case RATE:
      if (value == null) {
        unsetRate();
      } else {
        setRate((java.lang.Long)value);
      }
      break;

    case VIEW:
      if (value == null) {
        unsetView();
      } else {
        setView((java.lang.Long)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((java.lang.String)value);
      }
      break;

    case UPDATED_AT:
      if (value == null) {
        unsetUpdatedAt();
      } else {
        setUpdatedAt((java.lang.String)value);
      }
      break;

    case NUMBER_OF_CHAPTER:
      if (value == null) {
        unsetNumberOfChapter();
      } else {
        setNumberOfChapter((java.lang.String)value);
      }
      break;

    case CATEGORIES:
      if (value == null) {
        unsetCategories();
      } else {
        setCategories((java.util.List<TCategory>)value);
      }
      break;

    case CHAPTERS:
      if (value == null) {
        unsetChapters();
      } else {
        setChapters((java.util.List<TChapter>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID_COMIC:
      return getIdComic();

    case TITLE:
      return getTitle();

    case DESCRIPTION:
      return getDescription();

    case AUTHOR:
      return getAuthor();

    case THUMBNAIL:
      return getThumbnail();

    case STATUS:
      return getStatus();

    case LINK:
      return getLink();

    case RATE:
      return getRate();

    case VIEW:
      return getView();

    case CREATED_AT:
      return getCreatedAt();

    case UPDATED_AT:
      return getUpdatedAt();

    case NUMBER_OF_CHAPTER:
      return getNumberOfChapter();

    case CATEGORIES:
      return getCategories();

    case CHAPTERS:
      return getChapters();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID_COMIC:
      return isSetIdComic();
    case TITLE:
      return isSetTitle();
    case DESCRIPTION:
      return isSetDescription();
    case AUTHOR:
      return isSetAuthor();
    case THUMBNAIL:
      return isSetThumbnail();
    case STATUS:
      return isSetStatus();
    case LINK:
      return isSetLink();
    case RATE:
      return isSetRate();
    case VIEW:
      return isSetView();
    case CREATED_AT:
      return isSetCreatedAt();
    case UPDATED_AT:
      return isSetUpdatedAt();
    case NUMBER_OF_CHAPTER:
      return isSetNumberOfChapter();
    case CATEGORIES:
      return isSetCategories();
    case CHAPTERS:
      return isSetChapters();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TComic)
      return this.equals((TComic)that);
    return false;
  }

  public boolean equals(TComic that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_idComic = true;
    boolean that_present_idComic = true;
    if (this_present_idComic || that_present_idComic) {
      if (!(this_present_idComic && that_present_idComic))
        return false;
      if (this.idComic != that.idComic)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_author = true && this.isSetAuthor();
    boolean that_present_author = true && that.isSetAuthor();
    if (this_present_author || that_present_author) {
      if (!(this_present_author && that_present_author))
        return false;
      if (!this.author.equals(that.author))
        return false;
    }

    boolean this_present_thumbnail = true && this.isSetThumbnail();
    boolean that_present_thumbnail = true && that.isSetThumbnail();
    if (this_present_thumbnail || that_present_thumbnail) {
      if (!(this_present_thumbnail && that_present_thumbnail))
        return false;
      if (!this.thumbnail.equals(that.thumbnail))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_link = true && this.isSetLink();
    boolean that_present_link = true && that.isSetLink();
    if (this_present_link || that_present_link) {
      if (!(this_present_link && that_present_link))
        return false;
      if (!this.link.equals(that.link))
        return false;
    }

    boolean this_present_rate = true;
    boolean that_present_rate = true;
    if (this_present_rate || that_present_rate) {
      if (!(this_present_rate && that_present_rate))
        return false;
      if (this.rate != that.rate)
        return false;
    }

    boolean this_present_view = true;
    boolean that_present_view = true;
    if (this_present_view || that_present_view) {
      if (!(this_present_view && that_present_view))
        return false;
      if (this.view != that.view)
        return false;
    }

    boolean this_present_createdAt = true && this.isSetCreatedAt();
    boolean that_present_createdAt = true && that.isSetCreatedAt();
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (!this.createdAt.equals(that.createdAt))
        return false;
    }

    boolean this_present_updatedAt = true && this.isSetUpdatedAt();
    boolean that_present_updatedAt = true && that.isSetUpdatedAt();
    if (this_present_updatedAt || that_present_updatedAt) {
      if (!(this_present_updatedAt && that_present_updatedAt))
        return false;
      if (!this.updatedAt.equals(that.updatedAt))
        return false;
    }

    boolean this_present_numberOfChapter = true && this.isSetNumberOfChapter();
    boolean that_present_numberOfChapter = true && that.isSetNumberOfChapter();
    if (this_present_numberOfChapter || that_present_numberOfChapter) {
      if (!(this_present_numberOfChapter && that_present_numberOfChapter))
        return false;
      if (!this.numberOfChapter.equals(that.numberOfChapter))
        return false;
    }

    boolean this_present_categories = true && this.isSetCategories();
    boolean that_present_categories = true && that.isSetCategories();
    if (this_present_categories || that_present_categories) {
      if (!(this_present_categories && that_present_categories))
        return false;
      if (!this.categories.equals(that.categories))
        return false;
    }

    boolean this_present_chapters = true && this.isSetChapters();
    boolean that_present_chapters = true && that.isSetChapters();
    if (this_present_chapters || that_present_chapters) {
      if (!(this_present_chapters && that_present_chapters))
        return false;
      if (!this.chapters.equals(that.chapters))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(idComic);

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetAuthor()) ? 131071 : 524287);
    if (isSetAuthor())
      hashCode = hashCode * 8191 + author.hashCode();

    hashCode = hashCode * 8191 + ((isSetThumbnail()) ? 131071 : 524287);
    if (isSetThumbnail())
      hashCode = hashCode * 8191 + thumbnail.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetLink()) ? 131071 : 524287);
    if (isSetLink())
      hashCode = hashCode * 8191 + link.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(view);

    hashCode = hashCode * 8191 + ((isSetCreatedAt()) ? 131071 : 524287);
    if (isSetCreatedAt())
      hashCode = hashCode * 8191 + createdAt.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdatedAt()) ? 131071 : 524287);
    if (isSetUpdatedAt())
      hashCode = hashCode * 8191 + updatedAt.hashCode();

    hashCode = hashCode * 8191 + ((isSetNumberOfChapter()) ? 131071 : 524287);
    if (isSetNumberOfChapter())
      hashCode = hashCode * 8191 + numberOfChapter.hashCode();

    hashCode = hashCode * 8191 + ((isSetCategories()) ? 131071 : 524287);
    if (isSetCategories())
      hashCode = hashCode * 8191 + categories.hashCode();

    hashCode = hashCode * 8191 + ((isSetChapters()) ? 131071 : 524287);
    if (isSetChapters())
      hashCode = hashCode * 8191 + chapters.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TComic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetIdComic()).compareTo(other.isSetIdComic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdComic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idComic, other.idComic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAuthor()).compareTo(other.isSetAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.author, other.author);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetThumbnail()).compareTo(other.isSetThumbnail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThumbnail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thumbnail, other.thumbnail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLink()).compareTo(other.isSetLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link, other.link);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRate()).compareTo(other.isSetRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rate, other.rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetView()).compareTo(other.isSetView());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetView()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.view, other.view);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreatedAt()).compareTo(other.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, other.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdatedAt()).compareTo(other.isSetUpdatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedAt, other.updatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumberOfChapter()).compareTo(other.isSetNumberOfChapter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberOfChapter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfChapter, other.numberOfChapter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCategories()).compareTo(other.isSetCategories());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategories()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categories, other.categories);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChapters()).compareTo(other.isSetChapters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChapters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapters, other.chapters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TComic(");
    boolean first = true;

    sb.append("idComic:");
    sb.append(this.idComic);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("author:");
    if (this.author == null) {
      sb.append("null");
    } else {
      sb.append(this.author);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thumbnail:");
    if (this.thumbnail == null) {
      sb.append("null");
    } else {
      sb.append(this.thumbnail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("link:");
    if (this.link == null) {
      sb.append("null");
    } else {
      sb.append(this.link);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rate:");
    sb.append(this.rate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("view:");
    sb.append(this.view);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdAt:");
    if (this.createdAt == null) {
      sb.append("null");
    } else {
      sb.append(this.createdAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatedAt:");
    if (this.updatedAt == null) {
      sb.append("null");
    } else {
      sb.append(this.updatedAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numberOfChapter:");
    if (this.numberOfChapter == null) {
      sb.append("null");
    } else {
      sb.append(this.numberOfChapter);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("categories:");
    if (this.categories == null) {
      sb.append("null");
    } else {
      sb.append(this.categories);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chapters:");
    if (this.chapters == null) {
      sb.append("null");
    } else {
      sb.append(this.chapters);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TComicStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TComicStandardScheme getScheme() {
      return new TComicStandardScheme();
    }
  }

  private static class TComicStandardScheme extends org.apache.thrift.scheme.StandardScheme<TComic> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TComic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID_COMIC
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.idComic = iprot.readI64();
              struct.setIdComicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.author = iprot.readString();
              struct.setAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // THUMBNAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thumbnail = iprot.readString();
              struct.setThumbnailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.link = iprot.readString();
              struct.setLinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rate = iprot.readI64();
              struct.setRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VIEW
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.view = iprot.readI64();
              struct.setViewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdAt = iprot.readString();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UPDATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updatedAt = iprot.readString();
              struct.setUpdatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NUMBER_OF_CHAPTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.numberOfChapter = iprot.readString();
              struct.setNumberOfChapterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CATEGORIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.categories = new java.util.ArrayList<TCategory>(_list0.size);
                TCategory _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TCategory();
                  _elem1.read(iprot);
                  struct.categories.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setCategoriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CHAPTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.chapters = new java.util.ArrayList<TChapter>(_list3.size);
                TChapter _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new TChapter();
                  _elem4.read(iprot);
                  struct.chapters.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setChaptersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TComic struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_COMIC_FIELD_DESC);
      oprot.writeI64(struct.idComic);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.author != null) {
        oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
        oprot.writeString(struct.author);
        oprot.writeFieldEnd();
      }
      if (struct.thumbnail != null) {
        oprot.writeFieldBegin(THUMBNAIL_FIELD_DESC);
        oprot.writeString(struct.thumbnail);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.link != null) {
        oprot.writeFieldBegin(LINK_FIELD_DESC);
        oprot.writeString(struct.link);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RATE_FIELD_DESC);
      oprot.writeI64(struct.rate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIEW_FIELD_DESC);
      oprot.writeI64(struct.view);
      oprot.writeFieldEnd();
      if (struct.createdAt != null) {
        oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
        oprot.writeString(struct.createdAt);
        oprot.writeFieldEnd();
      }
      if (struct.updatedAt != null) {
        oprot.writeFieldBegin(UPDATED_AT_FIELD_DESC);
        oprot.writeString(struct.updatedAt);
        oprot.writeFieldEnd();
      }
      if (struct.numberOfChapter != null) {
        oprot.writeFieldBegin(NUMBER_OF_CHAPTER_FIELD_DESC);
        oprot.writeString(struct.numberOfChapter);
        oprot.writeFieldEnd();
      }
      if (struct.categories != null) {
        oprot.writeFieldBegin(CATEGORIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.categories.size()));
          for (TCategory _iter6 : struct.categories)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.chapters != null) {
        oprot.writeFieldBegin(CHAPTERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.chapters.size()));
          for (TChapter _iter7 : struct.chapters)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TComicTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TComicTupleScheme getScheme() {
      return new TComicTupleScheme();
    }
  }

  private static class TComicTupleScheme extends org.apache.thrift.scheme.TupleScheme<TComic> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TComic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIdComic()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetAuthor()) {
        optionals.set(3);
      }
      if (struct.isSetThumbnail()) {
        optionals.set(4);
      }
      if (struct.isSetStatus()) {
        optionals.set(5);
      }
      if (struct.isSetLink()) {
        optionals.set(6);
      }
      if (struct.isSetRate()) {
        optionals.set(7);
      }
      if (struct.isSetView()) {
        optionals.set(8);
      }
      if (struct.isSetCreatedAt()) {
        optionals.set(9);
      }
      if (struct.isSetUpdatedAt()) {
        optionals.set(10);
      }
      if (struct.isSetNumberOfChapter()) {
        optionals.set(11);
      }
      if (struct.isSetCategories()) {
        optionals.set(12);
      }
      if (struct.isSetChapters()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetIdComic()) {
        oprot.writeI64(struct.idComic);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetAuthor()) {
        oprot.writeString(struct.author);
      }
      if (struct.isSetThumbnail()) {
        oprot.writeString(struct.thumbnail);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetLink()) {
        oprot.writeString(struct.link);
      }
      if (struct.isSetRate()) {
        oprot.writeI64(struct.rate);
      }
      if (struct.isSetView()) {
        oprot.writeI64(struct.view);
      }
      if (struct.isSetCreatedAt()) {
        oprot.writeString(struct.createdAt);
      }
      if (struct.isSetUpdatedAt()) {
        oprot.writeString(struct.updatedAt);
      }
      if (struct.isSetNumberOfChapter()) {
        oprot.writeString(struct.numberOfChapter);
      }
      if (struct.isSetCategories()) {
        {
          oprot.writeI32(struct.categories.size());
          for (TCategory _iter8 : struct.categories)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetChapters()) {
        {
          oprot.writeI32(struct.chapters.size());
          for (TChapter _iter9 : struct.chapters)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TComic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.idComic = iprot.readI64();
        struct.setIdComicIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.author = iprot.readString();
        struct.setAuthorIsSet(true);
      }
      if (incoming.get(4)) {
        struct.thumbnail = iprot.readString();
        struct.setThumbnailIsSet(true);
      }
      if (incoming.get(5)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.link = iprot.readString();
        struct.setLinkIsSet(true);
      }
      if (incoming.get(7)) {
        struct.rate = iprot.readI64();
        struct.setRateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.view = iprot.readI64();
        struct.setViewIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createdAt = iprot.readString();
        struct.setCreatedAtIsSet(true);
      }
      if (incoming.get(10)) {
        struct.updatedAt = iprot.readString();
        struct.setUpdatedAtIsSet(true);
      }
      if (incoming.get(11)) {
        struct.numberOfChapter = iprot.readString();
        struct.setNumberOfChapterIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.categories = new java.util.ArrayList<TCategory>(_list10.size);
          TCategory _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = new TCategory();
            _elem11.read(iprot);
            struct.categories.add(_elem11);
          }
        }
        struct.setCategoriesIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.chapters = new java.util.ArrayList<TChapter>(_list13.size);
          TChapter _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new TChapter();
            _elem14.read(iprot);
            struct.chapters.add(_elem14);
          }
        }
        struct.setChaptersIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

